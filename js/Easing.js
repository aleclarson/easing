// Generated by CoffeeScript 1.12.4
var Easing, NamedFunction, isType;

NamedFunction = require("NamedFunction");

isType = require("isType");

Easing = NamedFunction("Easing", function(builder) {
  var ease;
  ease = builder.call(Easing);
  if (isType(ease, Function)) {
    return ease;
  }
  throw TypeError("Expected a Function to be returned!");
});

Object.assign(Easing, {
  bezier: require("bezier"),
  linear: function(t) {
    return t;
  },
  quad: function(t) {
    return t * t;
  },
  pow: function(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  },
  flipXY: function(ease) {
    return function(t) {
      return 1 - ease(1 - t);
    };
  },
  flipX: function(ease) {
    return function(t) {
      return ease(1 - t);
    };
  },
  flipY: function(ease) {
    return function(t) {
      return 1 - ease(t);
    };
  },
  elastic: function(stretch, dt) {
    if (dt == null) {
      dt = 1;
    }
    return function(t) {
      return stretch * t * dt / (dt + t * stretch);
    };
  },
  inout: function(ease) {
    return function(t) {
      if (t < 0.5) {
        return 0.5 * ease(2 * t);
      } else {
        return 1 - 0.5 * ease(2 * (1 - t));
      }
    };
  }
});

Object.assign(Easing, {
  outQuad: Easing(function() {
    return this.flipXY(this.quad);
  }),
  outPow: function(e) {
    return Easing.flipXY(Easing.pow(e));
  }
});

module.exports = Easing;
